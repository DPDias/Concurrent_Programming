/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Assert;
import org.junit.Test;

import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;

import static org.junit.Assert.*;

public class AppTest {

    @Test
    public void OneThreadThreeTasks() throws InterruptedException {
        SimpleThreadPoolExecutor a = new SimpleThreadPoolExecutor(1, 1000000);
        Integer [] test = new Integer[]{0};
        Integer[] result = new Integer[3];
        a.execute(()-> result[0] = test[0]++, 5000);
        a.execute(()-> result[1] = test[0]++, 5000);
        a.execute(()-> result[2] = test[0]++, 5000);
        a.shutdown();
        a.awaitTermination(15000);
    }

    @Test (expected = RejectedExecutionException.class)
    public void shutdownThenException() throws RejectedExecutionException, InterruptedException {
        SimpleThreadPoolExecutor a = new SimpleThreadPoolExecutor(4, 1000000);
        Integer [] test = new Integer[]{0};
        Integer[] result = new Integer[3];
        a.execute(()-> result[0] = test[0]++, 5000);
        a.execute(()-> result[1] = test[0]++, 5000);
        a.shutdown();
        a.execute(()-> result[2] = test[0]++, 5000);
        a.awaitTermination(15000);
    }

    @Test
    public void taskBlockedDoneAfterShutdown() throws InterruptedException {
        SimpleThreadPoolExecutor a = new SimpleThreadPoolExecutor(2, 1000000);
        a.execute(()-> {
            try{
                 Thread.sleep(5000);
            }catch (InterruptedException e){
                e.getMessage();
            }
        }, 1000);
        a.execute(()-> {
            try{
                Thread.sleep(5000);
            }catch (InterruptedException e){
                e.getMessage();
            }
        }, 1000);
        AtomicBoolean ab = new AtomicBoolean(false);
        a.execute(()->ab.set(true), 5500);
        a.shutdown();
        a.awaitTermination(12000);
        Assert.assertTrue(ab.get());
    }


    @Test
    public void invariantTest() throws Throwable {
        SimpleThreadPoolExecutor stpe = new SimpleThreadPoolExecutor(5, 1000);
        int nrOfThreads = 1000;
        int testTime = 6000;
        int blockedTime = 2000;
        TestThreadRunner ttr = new TestThreadRunner();
        AtomicLong al = new AtomicLong(0);
        for(int i = 0; i< nrOfThreads ; i++) {
            ttr.start("", end -> {
                while (!end.get()) {
                    long before = al.get();
                    AtomicBoolean runDone = new AtomicBoolean(false);
                    stpe.execute(()-> {
                        al.getAndIncrement();
                        runDone.set(true);
                    }, 1000);
                    Thread.sleep(1000);
                    if(runDone.get())
                        Assert.assertTrue(before < al.get());
                }
            });
        }
        ttr.waitForTestEnd(testTime, blockedTime);
        stpe.shutdown();
        Assert.assertTrue(stpe.awaitTermination(2000));
    }


}
